//
//  SenecEnergyFlow.swift
//  SenecClient
//
//  Created by André Rohrbeck on 09.10.18.
//

import Foundation

/// The energy flow within a Senec battery system.
///
/// # Real-World-Background
///
/// The Senec Battery is the energy flow controller within a photovoltaic system.
/// It controls the flow of energy between
/// * The photovoltaic system (including inverter)
/// * The house as consumer
/// * The battery acting as buffer
/// * The grid, into power can be sent and from which power can be taken.
///
/// Energy flow is power. Power is measured in the SI-unit *Watt* (W).
/// Consequently all properties in the energy flow are measured in Watt.
///
/// # Design of the type
///
/// `SenecEnergyFlow` represents the energy flow at a given moment in time.
/// It can be interpreted as a snapshot of the different energy flows.
/// Consequently it is implemented as an immutable struct.
///
/// Usually a `SenecEnergyFlow` is retreived from the Senec battery web service
/// and never mutated. It can serve as a method to display the energy flow to the
/// Users and also to serve as a basis for some decision regarding the operation
/// of the system.
///
/// - Author: André Rohrbeck
/// - Copyright: André Rohrbeck © 2018
/// - Date: 2018-10-14
public struct SenecEnergyFlow {
    // MARK: - Primitive properties
    /// The power in Watt generated by the solar panels.
    ///
    /// More exactly this is the power which comes from the inverter.
    /// This value should only have positive values.
    public let photovoltaicPowerGeneration: Double

    /// The power in Watt with which the battery is charged.
    ///
    /// Positive values: The battery is charged.
    /// Negative values: The battery is discharged.
    public let batteryPowerFlow: Double

    /// The power in Watt that is consumed from the grid.
    ///
    /// Positive values: Power flows from the grid.
    /// Negative values: Power is pushed to the grid.
    public let gridPowerFlow: Double

    /// The power consumption by the house in Watt.
    ///
    /// Always positive value.
    public let housePowerConsumption: Double

    /// The state of charge of the battery normalized to the Range of 0 to 1.
    public let batteryStateOfCharge: Double


    // MARK: - Construction
    /// Default constructor.
    ///
    /// - Parameter photovoltaicPowerGeneration: Power generated by the photovoltaic system in Watt.
    /// - Parameter batteryPowerFlow: Power flow into the battery in Watt (negative values allowed).
    /// - Parameter gridPowerFlow: Power flow from the grid in Watt (negative values allowed).
    /// - Parameter housePowerConsumption: Power consumed by the house in Watt.
    /// - Parameter batteryStateOfCharge: The state of charge of the battery in the range from 0 to 1.
    public init (photovoltaicPowerGeneration: Double,
                 batteryPowerFlow: Double,
                 gridPowerFlow: Double,
                 housePowerConsumption: Double,
                 batteryStateOfCharge: Double) {
        self.photovoltaicPowerGeneration = max (0, photovoltaicPowerGeneration)
        self.batteryPowerFlow = batteryPowerFlow
        self.gridPowerFlow = gridPowerFlow
        self.housePowerConsumption = max (0, housePowerConsumption)
        self.batteryStateOfCharge = max (0, min (batteryStateOfCharge, 1))
    }


    // MARK: - Splitting up in power flow direction
    /// The power with which the battery is charged in Watt.
    public var batteryChargingPower: Double {
        return batteryPowerFlow < 0 ? 0 : batteryPowerFlow
    }


    /// The power with which the battery is discharged in Watt.
    public var batteryDischargingPower: Double {
        return batteryPowerFlow < 0 ? -batteryPowerFlow : 0
    }


    /// The power which is sent to the grid in Watt.
    public var gridUpPower: Double {
        return gridPowerFlow < 0 ? -gridPowerFlow : 0
    }


    /// The power which is received from the grid in Watt.
    public var gridDownPower: Double {
        return gridPowerFlow > 0 ? gridPowerFlow : 0
    }


    // MARK: - Calculation of power flows
    /// The power which flows from the photovoltaic cells to the house in Watt.
    public var photovoltaicToHousePower: Double {
        // Assumption: If less is produced than needed, everything goes into the need.
        if photovoltaicPowerGeneration <= housePowerConsumption {
            return photovoltaicPowerGeneration
        } else {    // if there is more PV energy than needed in the house
            return housePowerConsumption
        }
    }


    /// The power which flows from the photovoltaic cells into the battery in Watt.
    public var photovoltaicToBatteryPower: Double {
        if photovoltaicPowerGeneration > housePowerConsumption + batteryChargingPower {
            return photovoltaicPowerGeneration - housePowerConsumption - gridUpPower
        } else if photovoltaicPowerGeneration > housePowerConsumption {
            return photovoltaicPowerGeneration - housePowerConsumption
        } else {
            return 0.0
        }
    }


    /// The power which flows from the photovoltaic cells into the grid in Watt.
    public var photovoltaicToGridPower: Double {
        if gridUpPower == 0 {
            return 0.0
        } else {
            return photovoltaicPowerGeneration - photovoltaicToHousePower - photovoltaicToBatteryPower
        }
    }


    /// The power which flows from the grid to the battery in Watt.
    public var gridToBatteryPower: Double {
        if gridDownPower == 0 {
            return 0.0
        } else if batteryChargingPower == 0 {
            return 0.0
        } else {
            return batteryChargingPower - photovoltaicToBatteryPower
        }
    }


    /// The power which flows from the battery to the grid in Watt.
    public var batteryToGridPower: Double {
        if batteryDischargingPower == 0 {
            return 0.0
        } else {
            return gridUpPower
        }
    }


    /// The power sent from the battery to the house in Watt.
    public var batteryToHousePower: Double {
        if batteryDischargingPower == 0.0 {
            return 0.0
        } else {
            return batteryDischargingPower - gridUpPower
        }
    }


    /// The power from the grid consumed by the house in Watt.
    public var gridToHousePower: Double {
        if gridDownPower == 0.0 {
            return 0.0
        } else if photovoltaicPowerGeneration - photovoltaicToHousePower - batteryChargingPower < 0 {
            return 0.0
        } else {
            return gridDownPower
        }
    }
}



extension SenecEnergyFlow: Codable {
    public init (from decoder: Decoder) throws {
        do {
            let jsonFlow = try JSONEnergyFlow(from: decoder)

            photovoltaicPowerGeneration =
                (SenecValue(string: jsonFlow.values.photovoltaicPowerGenerationString)?.doubleValue ?? 0.0) // 1000.0
            batteryPowerFlow = SenecValue(string: jsonFlow.values.batteryPowerFlowString)?.doubleValue ?? 0.0
            gridPowerFlow = SenecValue(string: jsonFlow.values.gridPowerFlowString)?.doubleValue ?? 0.0
            housePowerConsumption = SenecValue(string: jsonFlow.values.housePowerConsumptionString)?.doubleValue ?? 0.0
            let socPercent = SenecValue(string: jsonFlow.values.batteryStateOfChargeString)?.doubleValue ?? 0.0
            batteryStateOfCharge = socPercent / 100.0
        }
    }
}



internal struct JSONEnergyFlow: Codable, Equatable {
    fileprivate let values: JSONEnergyFlowValues

    private enum CodingKeys: String, CodingKey {
        case values = "ENERGY"
    }


    /// Default Initializer
    ///
    /// This initializes a completely empty JSON. All fields are there, but
    /// they are filled with empty strings.
    public init() {
        values = JSONEnergyFlowValues (photovoltaicPowerGenerationString: "",
                                       batteryPowerFlowString: "",
                                       gridPowerFlowString: "",
                                       housePowerConsumptionString: "",
                                       batteryStateOfChargeString: "")
    }
}



private struct JSONEnergyFlowValues: Codable, Equatable {
    let photovoltaicPowerGenerationString: String
    let batteryPowerFlowString: String
    let gridPowerFlowString: String
    let housePowerConsumptionString: String
    let batteryStateOfChargeString: String



    enum CodingKeys: String, CodingKey {
        case photovoltaicPowerGenerationString = "GUI_INVERTER_POWER"
        case batteryPowerFlowString = "GUI_BAT_DATA_POWER"
        case gridPowerFlowString = "GUI_GRID_POW"
        case housePowerConsumptionString = "GUI_HOUSE_POW"
        case batteryStateOfChargeString = "GUI_BAT_DATA_FUEL_CHARGE"
    }
}
